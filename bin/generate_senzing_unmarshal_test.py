#! /usr/bin/env python3

"""
Used to generate senzing/unmarshal_test.go
"""

import json
import logging
import os
import re

from test_cases_from_g2_sdk_json_type_definition import TEST_CASES

IS_DEBUG = False
FINAL_RESULT = {}

OUTPUT_FILE = "./senzing/unmarshal_test.go"

NAME_MAP = {
    "SzdiagnosticCheckDbperfResponse": "SzdiagnosticCheckDBPerfResponse",
    "SzengineExportConfigAndConfigIdresponse": "SzengineExportConfigAndConfigIDResponse",
    "SzengineFindInterestingEntitiesByEntityIdresponse": "SzengineFindInterestingEntitiesByEntityIDResponse",
    "SzengineFindInterestingEntitiesByRecordIdresponse": "SzengineFindInterestingEntitiesByRecordIDResponse",
    "SzengineFindNetworkByEntityIdresponse": "SzengineFindNetworkByEntityIDResponse",
    "SzengineFindNetworkByEntityIdv2response": "SzengineFindNetworkByEntityIDV2Response",
    "SzengineFindNetworkByRecordIdresponse": "SzengineFindNetworkByRecordIDResponse",
    "SzengineFindNetworkByRecordIdv2response": "SzengineFindNetworkByRecordIDV2Response",
    "SzengineFindPathByEntityIdresponse": "SzengineFindPathByEntityIDResponse",
    "SzengineFindPathByEntityIdv2response": "SzengineFindPathByEntityIDV2Response",
    "SzengineFindPathByRecordIdresponse": "SzengineFindPathByRecordIDResponse",
    "SzengineFindPathByRecordIdv2response": "SzengineFindPathByRecordIDV2Response",
    "SzengineFindPathExcludingByEntityIdresponse": "SzengineFindPathExcludingByEntityIDResponse",
    "SzengineFindPathExcludingByEntityIdv2response": "SzengineFindPathExcludingByEntityIDV2Response",
    "SzengineFindPathExcludingByRecordIdresponse": "SzengineFindPathExcludingByRecordIDResponse",
    "SzengineFindPathExcludingByRecordIdv2response": "SzengineFindPathExcludingByRecordIDV2Response",
    "SzengineFindPathIncludingSourceByEntityIdresponse": "SzengineFindPathIncludingSourceByEntityIDResponse",
    "SzengineFindPathIncludingSourceByEntityIdv2response": "SzengineFindPathIncludingSourceByEntityIDV2Response",
    "SzengineFindPathIncludingSourceByRecordIdresponse": "SzengineFindPathIncludingSourceByRecordIDResponse",
    "SzengineFindPathIncludingSourceByRecordIdv2response": "SzengineFindPathIncludingSourceByRecordIDV2Response",
    "SzengineGetEntityByEntityIdresponse": "SzengineGetEntityByEntityIDResponse",
    "SzengineGetEntityByEntityIdv2response": "SzengineGetEntityByEntityIDV2Response",
    "SzengineGetEntityByRecordIdresponse": "SzengineGetEntityByRecordIDResponse",
    "SzengineGetEntityByRecordIdv2response": "SzengineGetEntityByRecordIDV2Response",
    "SzengineGetRecordV2response": "SzengineGetRecordV2Response",
    "SzengineGetVirtualEntityByRecordIdresponse": "SzengineGetVirtualEntityByRecordIDResponse",
    "SzengineGetVirtualEntityByRecordIdv2response": "SzengineGetVirtualEntityByRecordIDV2Response",
    "SzengineHowEntityByEntityIdresponse": "SzengineHowEntityByEntityIDResponse",
    "SzengineHowEntityByEntityIdv2response": "SzengineHowEntityByEntityIDV2Response",
    "SzengineSearchByAttributesV2response": "SzengineSearchByAttributesV2Response",
    "SzengineSearchByAttributesV3response": "SzengineSearchByAttributesV3Response",
    "SzengineWhyEntitiesV2response": "SzengineWhyEntitiesV2Response",
    "SzengineWhyRecordsV2response": "SzengineWhyRecordsV2Response",
}


# -----------------------------------------------------------------------------
# --- Helpers
# -----------------------------------------------------------------------------


def canonical_json(json_string):
    """Create compact JSON.  No spaces."""
    json_object = json.loads(json_string)
    result = json.dumps(json_object, sort_keys=True, separators=(",", ":"))
    return result


# -----------------------------------------------------------------------------
# --- Main
# -----------------------------------------------------------------------------

# Set up logging.

logging.basicConfig(format="%(asctime)s %(message)s", level=logging.INFO)

logging.info("{0}".format("-" * 80))
logging.info("--- {0} - Begin".format(os.path.basename(__file__)))
logging.info("{0}".format("-" * 80))

# Create multi-line strings for output.

# noqa: E101
OUTPUT_HEADER = """// Code generated by generate_senzing_unmarshal_test.py. DO NOT EDIT.

package senzing

import (
	"context"
	"fmt"
	"testing"

	truncator "github.com/aquilax/truncate"
	"github.com/stretchr/testify/assert"
)

const (
	defaultTruncation = 127
	printResults      = false
)

// ----------------------------------------------------------------------------
// Internal functions
// ----------------------------------------------------------------------------

func truncate(aString string, length int) string {
	return truncator.Truncate(aString, length, "...", truncator.PositionEnd)
}

func printResult(test *testing.T, title string, result interface{}) {
	if printResults {
		test.Logf("%s: %+v", title, truncate(fmt.Sprintf("%+v", result), defaultTruncation))
	}
}

func printActual(test *testing.T, actual interface{}) {
	printResult(test, "Actual", actual)
}

func testError(test *testing.T, ctx context.Context, err error) {
	if err != nil {
		test.Log("Error:", err.Error())
		assert.FailNow(test, err.Error())
	}
}

// ----------------------------------------------------------------------------
// Test interface functions
// ----------------------------------------------------------------------------
"""  # noqa: E101, W191

TEST_FUNCTION_TEMPLATE = f"""
	ctx := context.TODO()
	jsonString := `{{json}}`
	result, err := Unmarshal{{struct}}(ctx, jsonString)
	testError(test, ctx, err)
	printActual(test, result)
"""  # noqa: E101,F541,W191

OUTPUT_FOOTER = """
"""

with open(OUTPUT_FILE, "w", encoding="utf-8") as file:
    file.write(OUTPUT_HEADER)
    for senzing_api_class, method_test_cases in TEST_CASES.items():
        for test_case_name, test_case_json in method_test_cases.items():
            file.write("\n")
            better_test_case_name = re.sub(
                "[^0-9a-zA-Z]+", "", test_case_name
            ).capitalize()
            canonical_test_case_json = canonical_json(test_case_json)
            canonical_senzing_api_class = NAME_MAP.get(
                senzing_api_class, senzing_api_class
            )
            file.write(
                "func Test{0}{1}(test *testing.T) {{".format(
                    senzing_api_class, better_test_case_name
                )
            )
            file.write(
                TEST_FUNCTION_TEMPLATE.format(
                    json=canonical_test_case_json, struct=canonical_senzing_api_class
                )
            )
            file.write("}")
    file.write(OUTPUT_FOOTER)

# Epilog.

logging.info("{0}".format("-" * 80))
logging.info("--- {0} - End".format(os.path.basename(__file__)))
logging.info("{0}".format("-" * 80))
